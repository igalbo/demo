{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","isRed","active","total","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","rgb","multiplier","recovered","deaths","sortData","data","sort","a","b","prettyPrintStat","stat","numeral","format","Map","countries","casesType","center","zoom","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","console","log","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","sortedData","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4fdd0843.chunk.js","sourcesContent":["import React from 'react'\r\nimport './InfoBox.css';\r\nimport {Card, CardContent, Typography} from \"@material-ui/core\"\r\n\r\nfunction InfoBox({title, cases, isRed, active, total, ...props}) {\r\n    return (\r\n        <Card onClick={props.onClick} className = {`infoBox ${active && \"infoBox--selected\"} ${isRed && \"infoBox--red\"}`}>\r\n            <CardContent>\r\n                <Typography  className = \"infoBox__title\" color = \"textSecondary\">{title}</Typography>\r\n\r\n                <h2 className = {`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>{cases}</h2>\r\n\r\n                <Typography className = \"infoBox_total\" color = \"textSecondary\">\r\n                    {total} Total\r\n                </Typography>\r\n            </CardContent>\r\n\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n    rgb: \"rgb(204, 16, 52)\",\r\n    multiplier: 100,\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n    rgb: \"rgb(125, 215, 29)\",\r\n    multiplier: 150,\r\n  },\r\n  deaths: {\r\n    hex: \"#fb4443\",\r\n    rgb: \"rgb(251, 68, 67)\",\r\n    multiplier: 250,\r\n  },\r\n};\r\n\r\nexport const sortData = (data) => {\r\n  const sortedData = [...data];\r\n\r\n  return sortedData.sort((a, b) => b.cases - a.cases);\r\n};\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\n//draw circles on the map\r\nexport const showDataOnMap = (data, casesType = \"cases\") =>\r\n  data.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      fillOpacity={0.4}\r\n      color={casesTypeColors[casesType].hex}\r\n      fillColor={casesTypeColors[casesType].hex}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          />\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-cases\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));\r\n","import React from 'react'\r\nimport \"./Map.css\";\r\nimport {Map as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport { showDataOnMap } from './util';\r\n\r\nfunction Map({countries, casesType, center, zoom}) {\r\n    return (\r\n        <div className=\"map\">\r\n            <LeafletMap center={center} zoom={zoom}>\r\n                <TileLayer\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                />\r\n                {showDataOnMap(countries, casesType)}\r\n            </LeafletMap>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Map;\r\n","import React from 'react';\r\nimport numeral from \"numeral\";\r\nimport './Table.css';\r\n\r\nfunction Table({ countries }) {\r\n    return <div className=\"table\">\r\n        {countries.map(({country, cases}) => (\r\n            <tr>\r\n                <td>{country}</td>\r\n                <td><srtong>{numeral(cases).format('0,0')}</srtong></td>\r\n            </tr>        \r\n        ))}\r\n        </div>;\r\n}\r\n\r\nexport default Table\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n    legend: {\r\n        display: false,\r\n    },\r\n    elements: {\r\n        point: {\r\n            radius: 0,\r\n        },\r\n    },\r\n    maintainAspectRatio: false,\r\n    tooltips: {\r\n        mode: \"index\",\r\n        intersect: false,\r\n        callbacks: {\r\n            label: function (tooltipItem, data) {\r\n                return numeral(tooltipItem.value).format(\"+0,0\");\r\n            },\r\n        },\r\n    },\r\n    scales: {\r\n        xAxes: [\r\n            {\r\n                type: \"time\",\r\n                time: {\r\n                    format: \"MM/DD/YY\",\r\n                    tooltipFormat: \"ll\",\r\n                },\r\n            },\r\n        ],\r\n        yAxes: [\r\n            {\r\n                gridLines: {\r\n                    display: false,\r\n                },\r\n                ticks: {\r\n                    callback: function(value, index, values) {\r\n                        return numeral(value).format(\"0a\");\r\n                    },\r\n                },\r\n            },\r\n        ],\r\n    },\r\n};\r\n\r\nconst buildChartData = (data, casesType = 'cases') => {\r\n    const chartData = [];\r\n    let lastDataPoint;\r\n    \r\n    for(let date in data.cases){\r\n        if(lastDataPoint) {\r\n            const newDataPoint = {\r\n                x: date,\r\n                y: data[casesType][date] - lastDataPoint\r\n            };\r\n            chartData.push(newDataPoint);                \r\n        }\r\n        lastDataPoint = data[casesType][date];\r\n    }\r\n    return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType = \"cases\", ...props}) {\r\n    const [data, setData] = useState({});\r\n    \r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            await fetch('https://disease.sh/v3/covid-19/historical/all?lastdays=120')\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                let chartData = buildChartData(data, casesType);\r\n                console.log(chartData);\r\n                setData(chartData);\r\n            });\r\n        };\r\n\r\n        fetchData();\r\n    }, [casesType]);\r\n\r\n    return (\r\n        <div className={props.className}>\r\n            {data?.length > 0 && (\r\n                <Line \r\n                    options = {options}\r\n                    data={{\r\n                        datasets: [\r\n                            {\r\n                                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                                borderColor: \"#CC1034\",\r\n                                data: data,\r\n                            },\r\n                        ],\r\n                    }}\r\n                />\r\n            )}\r\n           \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LineGraph\r\n","import React, { useState, useEffect } from 'react';\nimport {\n  MenuItem,\n  FormControl,\n  Select,\n  Card,\n  CardContent\n} from \"@material-ui/core\";\nimport InfoBox from './InfoBox';\nimport Map from \"./Map\";\nimport './App.css';\nimport Table from \"./Table\";\nimport {sortData, prettyPrintStat} from './util';\nimport LineGraph from \"./LineGraph\";\nimport \"leaflet/dist/leaflet.css\";\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({ lat: 34.8074, lng: -40.4796});\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n    .then(response => response.json())\n    .then(data => {\n      setCountryInfo(data);\n    });\n  }, []);\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n      .then((response) => response.json())\n      .then((data) => {\n        const countries = data.map((country) => (\n          {\n            name: country.country,\n            value: country.countryInfo.iso2,\n          }\n        ));\n\n        const sortedData = sortData(data);\n        setTableData(sortedData);\n        setMapCountries(data);\n        setCountries(countries);\n      });\n    };\n    getCountriesData();\n  }, []);\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\n    //setCountry(countryCode);\n\n    const url = countryCode === \"worldwide\"\n    ? 'https://disease.sh/v3/covid-19/all'\n    : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    await fetch(url)\n      .then(response => response.json())\n      .then(data => {\n        setCountry(countryCode);\n        setCountryInfo(data);\n        if(countryCode != \"worldwide\") {\n          setMapCenter([data.countryInfo.lat, data.countryInfo.long]); //lat: 34.8074, lng: -40.4796\n        }\n        else {\n          setMapCenter([34.8074, -40.4796]);\n          setMapZoom(3);\n        }\n        setMapZoom(4);\n      })\n\n  };\n\n  console.log(\"COUNTRY INFO >>>\", countryInfo);\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className = \"app__header\">\n          <h1>COVID-19 TRACKER</h1>\n          <FormControl className = \"app__dropdown\">\n            <Select variant = \"outlined\" onChange = {onCountryChange} value = {country}>\n              <MenuItem value = \"worldwide\">Worldwide</MenuItem>\n              {countries.map((country) => (\n                <MenuItem value = {country.value}>{country.name}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n\n        <div className=\"app__stats\">\n          <InfoBox isRed active={casesType === \"cases\"} onClick={e => setCasesType('cases')} title=\"Coronavirus cases\" cases={prettyPrintStat(countryInfo.todayCases)} total={countryInfo.cases}/>\n          <InfoBox active={casesType === \"recovered\"} onClick={e => setCasesType('recovered')} title=\"Recovered\" cases={prettyPrintStat(countryInfo.todayRecovered)} total={countryInfo.recovered}/>\n          <InfoBox isRed active={casesType === \"deaths\"} onClick={e => setCasesType('deaths')} title=\"Deaths\" cases={prettyPrintStat(countryInfo.todayDeaths)} total={countryInfo.deaths}/>\n        </div>\n\n        <Map casesType={casesType} countries={mapCountries} center={mapCenter} zoom={mapZoom}/>\n      </div>\n      <Card className=\"app__right\">\n        <CardContent>\n          <h3>Live Cases by Country</h3>\n          <Table countries={tableData} />\n          <h3 className=\"app_graphTitle\">Worldwide new {casesType}</h3>\n          <LineGraph className=\"app__graph\" casesType={casesType}/>\n        </CardContent>\n      </Card>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}